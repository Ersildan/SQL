import sqlite3

"""–ó–∞–¥–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç—ã"""


"""–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö users_balance"""

db = sqlite3.connect('exchanger.db') # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
cur = db.cursor() # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
print("1. –°–æ–∑–¥–∞–ª–∏ –∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö exchanger.db")


"""–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É users_data, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.
–ó–∞–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫."""
cur.execute("""
    CREATE TABLE IF NOT EXISTS users_balance(
    UserID TEXT PRIMARY KEY,
    Balance_RUB FLOAT NOT NULL,
    Balance_USD FLOAT NOT NULL,
    Balance_EUR FLOAT NOT NULL
    );""")
print("2. –°–æ–∑–¥–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É users_balance –∏ –∑–∞–¥–∞–ª–∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫")


"""–í–Ω–æ—Å–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É.
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π.
–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å."""

money_params = ('–ë—Ä—é—Å –£—ç–π–Ω', 1000000.0, 1000.0, 100.0)
cur.execute("""
    INSERT OR IGNORE INTO users_balance (UserID, Balance_RUB, Balance_USD, Balance_EUR)
        VALUES (?, ?, ?, ?)""", money_params)
db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
print()

# txt = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë—ç—Ç-–æ–±–º–µ–Ω–Ω–∏–∫ üí∞
# –ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?
# –í–≤–µ–¥–∏—Ç–µ [ 1 ] –µ—Å–ª–∏ –º–µ–Ω—è–µ–º (USD –∏–ª–∏ EUR) –Ω–∞ —Ä—É–±–ª–∏
# –í–≤–µ–¥–∏—Ç–µ [ 2 ] –µ—Å–ª–∏ –º–µ–Ω—è–µ–º (RUB –∏–ª–∏ EUR) –Ω–∞ –±–∞–∫—Å—ã
# –í–≤–µ–¥–∏—Ç–µ [ 3 ] –µ—Å–ª–∏ –º–µ–Ω—è–µ–º (RUB –∏–ª–∏ USD) –Ω–∞ –µ–≤—Ä–æ
# """
# print(txt)

txt2 = """–ö—É—Ä—Å –≤–∞–ª—é—Ç:
1 USD = 70 RUB
1 EUR = 80 RUB
1 USD = 0,87 EUR
1 EUR = 1,15 USD"""

def check_summa(summa, choice):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ —Ö–≤–∞—Ç–∏—Ç –ª–∏ –¥–µ–Ω–µ–≥ –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã"""

    if summa.isdigit() is not True:
        raise Exception ('–û—à–∏–±–∫–∞: –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –±—É–∫–≤')

    cur.execute("""SELECT * FROM users_balance;""") # –ß–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ç–∞–±–ª–∏—Ü—É users_balance

    balance = cur.fetchone()
    balance_usd = balance[int(choice) + 1]

    if int(summa) > balance_usd:
        raise Exception ('\033[31m–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ USD –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ RUB.\033[0m\n'
                        f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ: {balance_usd} $\n'
                         '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

    else:
        print(f'–°–æ–≤–µ—Ä—à–µ–Ω –æ–±–º–µ–Ω –≤–∞–ª—é—Ç {summa}$. '
              f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ USD: {balance_usd - int(summa)}$\n'
              f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ RUB –Ω–∞ {int(summa) * 70}—Ä. –ë–∞–ª–∞–Ω—Å RUB: {balance[int(choice)] + int(summa) * 70}—Ä')

def func_rub():
    """–ú–µ–Ω—è–µ–º (USD –∏–ª–∏ EUR) –Ω–∞ —Ä—É–±–ª–∏"""
    while True:
        try:
            txt = "–í–≤–µ–¥–∏—Ç–µ [ 1 ] –µ—Å–ª–∏ –æ—Ç–¥–∞—ë—Ç–µ USD\n–í–≤–µ–¥–∏—Ç–µ [ 2 ] –µ—Å–ª–∏ –æ—Ç–¥–∞—ë—Ç–µ EUR\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª"
            print(txt)

            choice = input()

            if choice == '1':
                print('–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å USD?')
            elif choice == '2':
                print('–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å EUR')
            else:
                exit('–í—ã—Ö–æ–¥ –∏–∑ –æ–±–º–µ–Ω–Ω–∏–∫–∞')

            summa = input()

            check_summa(summa, choice) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
            break
        except Exception as e:
            print(e)

func_rub()


# match input().lower():
#     case 1, 'rub':
#         print()
#     case 2, 'usd':
#         print()
#     case 3, 'eur':
#         print()